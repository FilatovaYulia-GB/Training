#–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ, —Å –∫–æ–Ω—Ñ–µ—Ç–∞–º–∏ –∫ –±–æ—Ç—É.
#–£—Å–ª–æ–≤–∏–µ –∏–≥—Ä—ã: –ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 117 –∫–æ–Ω—Ñ–µ—Ç–∞. –ò–≥—Ä–∞—é—Ç –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –¥–µ–ª–∞—è —Ö–æ–¥ –¥—Ä—É–≥ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∞.
#–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–æ–π. –ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 28 –∫–æ–Ω—Ñ–µ—Ç.
# –í—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–≤—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥.

import logging
import random
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, Filters, MessageHandler, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)
logger = logging.getLogger(__name__)

CANDIES, TURN, GAME_OVER = range(3)

def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Candy Game! üç¨üéÆ")
    update.message.reply_text("–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 117 –∫–æ–Ω—Ñ–µ—Ç. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –∑–∞ —Ö–æ–¥ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –æ—Ç 1 –¥–æ 28 –∫–æ–Ω—Ñ–µ—Ç.\n"
                             "–¢–æ—Ç, –∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–µ—Ç—É, –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç. –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂—Ä–µ–±–∏–µ–º.")
    update.message.reply_text("–ù–∞—á–Ω—ë–º –∏–≥—Ä—É? –ù–∞–∂–º–∏—Ç–µ /play –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return CANDIES

def play_game(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
    candies = 117  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç
    players = ['–ß–µ–ª–æ–≤–µ–∫', '–ë–æ—Ç']
    first_turn = random.choice([0, 1])  # –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
    current_turn = first_turn  # –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
    context.user_data['candies'] = candies
    context.user_data['players'] = players
    context.user_data['first_turn'] = first_turn
    context.user_data['current_turn'] = current_turn
    update.message.reply_text(f"–ù–∞ —Å—Ç–æ–ª–µ {candies} –∫–æ–Ω—Ñ–µ—Ç. –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç {players[current_turn]}.")
    return TURN

def make_turn(update: Update, context: CallbackContext) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–º"""
    players = context.user_data['players']
    current_turn = context.user_data['current_turn']
    candies = context.user_data['candies']

    if current_turn == 0:  # –•–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞
        try:
            take = int(update.message.text)
            if take < 1 or take > 28:
                raise ValueError
            if take > candies:
                raise ValueError
            candies -= take
            context.user_data['candies'] = candies
            if candies == 0:
                update.message.reply_text(f"–í—ã –≤–∑—è–ª–∏ {take} –∫–æ–Ω—Ñ–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å 0 –∫–æ–Ω—Ñ–µ—Ç. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢")
                return GAME_OVER
            else:
                update.message.reply_text(f"–í—ã –≤–∑—è–ª–∏ {take} –∫–æ–Ω—Ñ–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç.")
                current_turn = 1  # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –±–æ—Ç–∞
                context.user_data['current_turn'] = current_turn
                bot_turn = random.randint(1, min(28, candies))
                candies -= bot_turn
                context.user_data['candies'] = candies
                update.message.reply_text(f"–ë–æ—Ç –≤–∑—è–ª {bot_turn} –∫–æ–Ω—Ñ–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç.")
                if candies == 0:
                    update.message.reply_text(f"–ë–æ—Ç –∑–∞–±—Ä–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
                    return GAME_OVER
                else:
                    update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥. –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å?")
                    return TURN
        except ValueError:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 28, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.")
            return TURN
    else:  # –•–æ–¥ –±–æ—Ç–∞
        bot_turn = random.randint(1, min(28, candies))
        candies -= bot_turn
        context.user_data['candies'] = candies
        update.message.reply_text(f"–ë–æ—Ç –≤–∑—è–ª {bot_turn} –∫–æ–Ω—Ñ–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç.")
        if candies == 0:
            update.message.reply_text(f"–ë–æ—Ç –∑–∞–±—Ä–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
            return GAME_OVER
        else:
            update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤–∞—à —Ö–æ–¥. –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å?")
            current_turn = 0  # –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞
            context.user_data['current_turn'] = current_turn
            return TURN

def cancel(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"""
    update.message.reply_text("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    return ConversationHandler.END

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CANDIES: [MessageHandler(Filters.regex('^(/play)$'), play_game)],
            TURN: [MessageHandler(Filters.text & ~Filters.command, make_turn)],
            GAME_OVER: [MessageHandler(Filters.all, cancel)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
    